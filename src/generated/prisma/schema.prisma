// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Prompt    Prompt[]
}

model Prompt {
  id        String               @id @default(cuid())
  prompt    String               @db.Text
  messages  PromptInputMessage[]
  timestamp DateTime             @default(now())
  responses PromptResponse[]

  // Model parameters
  temperature      Float?
  maxTokens        Int?
  topP             Float?
  frequencyPenalty Float?
  presencePenalty  Float?

  // User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PromptInputMessage {
  id       String @id @default(cuid())
  role     String // "system", "user", "assistant"
  content  String @db.Text
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String
  order    Int // To maintain the sequence of messages

  @@index([promptId, order])
}

model PromptResponse {
  id       String  @id @default(cuid())
  modelId  String
  text     String? @db.Text
  prompt   Prompt  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String

  // Metrics
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  responseTime     Float
  estimatedCost    Float

  createdAt DateTime @default(now())
}
